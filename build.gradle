/*
   Copyright 2017 Charles Korn.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/


import org.junit.platform.console.ConsoleLauncher

import java.nio.file.Paths
import java.text.SimpleDateFormat

buildscript {
    ext.kotlin_version = '1.1.4-3'
    ext.junit_version = '1.0.0-RC3'
    ext.spek_version = '1.1.4'

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.junit.platform:junit-platform-gradle-plugin:$junit_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'com.github.ben-manes.versions' version '0.15.0'
    id 'com.diffplug.gradle.spotless' version '3.5.2'
    id 'com.github.johnrengelman.shadow' version '2.0.1'
}

apply plugin: 'application'
apply plugin: 'kotlin'
apply plugin: 'org.junit.platform.gradle.plugin'

mainClassName = 'batect.ApplicationKt'
version = '0.1-preview'

repositories {
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version" // Override the version of kotlin-reflect used by jackson-module-kotlin

    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.1'
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.9.1'
    compile 'com.fasterxml.jackson.module:jackson-module-kotlin:2.9.1'
    compile 'com.github.salomonbrys.kodein:kodein:4.1.0'

    testCompile 'com.natpryce:hamkrest:1.4.2.0'
    testCompile 'com.nhaarman:mockito-kotlin-kt1.1:1.5.0'
    testCompile 'com.google.jimfs:jimfs:1.1'
    testCompile "org.jetbrains.spek:spek-api:$spek_version"

    testCompile("org.jetbrains.spek:spek-data-driven-extension:$spek_version") {
        exclude group: 'org.jetbrains.kotlin'
    }

    testRuntime("org.jetbrains.spek:spek-junit-platform-engine:$spek_version") {
        exclude group: 'org.junit.platform'
    }
}

junitPlatform {
    filters {
        engines {
            include 'spek'
        }
    }
}

sourceSets {
    journeyTest
}

configurations {
    journeyTestCompile.extendsFrom testCompile
    journeyTestRuntime.extendsFrom testRuntime
}

// Gross hack because the JUnit 5 Gradle plugin doesn't provide a task class that we can extend from,
// and the built-in Gradle Test task doesn't support JUnit 5.
// Based on https://github.com/junit-team/junit5/blob/master/junit-platform-gradle-plugin/src/main/groovy/org/junit/platform/gradle/plugin/JUnitPlatformPlugin.groovy
task journeyTest(type: JavaExec) {
    description 'Runs the journey tests.'
    group 'Verification'

    dependsOn journeyTestClasses
    dependsOn installShadowDist

    inputs.files installDist.outputs.files

    def reportDir = "$buildDir/test-results/journey-tests"
    outputs.dir reportDir

    classpath = sourceSets.journeyTest.runtimeClasspath + configurations.junitPlatform

    def scanDirs = [sourceSets.journeyTest.output.resourcesDir] +
            sourceSets.journeyTest.output.classesDirs +
            sourceSets.journeyTest.output.dirs.files

    main = ConsoleLauncher.class.getName()
    args = [
            '--scan-class-path', scanDirs.join(File.pathSeparator),
            '--reports-dir', reportDir,
            '--include-engine', 'spek',
            '--details', 'none'
    ]
}

def licenseText = """
   Copyright 2017 Charles Korn.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

ext.kotlinLicenseHeader = "/*$licenseText*/\n\n"

spotless {
    kotlin {
        ktlint("0.9.2")

        licenseHeader kotlinLicenseHeader

        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }
    format 'misc', {
        target '**/*.gradle', '**/*.md', '**/.gitignore', '**/*.yaml', '**/*.yml'

        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }
}

String runProcess(String... args) {
    def process = new ProcessBuilder(args)
            .redirectErrorStream(true)
            .start()

    def exitCode = process.waitFor()
    def output = process.inputStream.getText()

    if (exitCode != 0) {
        throw RuntimeException("$args failed with exit code $exitCode. Output was: $output")
    }

    return output.trim()
}

String getCurrentGitCommit() {
    return runProcess('git', 'describe', '--always', '--dirty', '--exclude', '*', '--abbrev=0')
}

String getCurrentGitCommitDate() {
    return runProcess('git', 'show', '-s', '--format=%ci', 'HEAD')
}

String getBuildDate() {
    if (project.hasProperty("releaseBuild")) {
        def dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss Z")
        dateFormat.setTimeZone(new SimpleTimeZone(SimpleTimeZone.UTC_TIME, "UTC"))
        return dateFormat.format(new Date())
    } else {
        return "(the build date is not populated for development builds)"
    }
}

String versionInfoFileContents() {
    kotlinLicenseHeader +
    """ |package batect
        |
        |// This file is generated automatically by the $generateVersionInfoFile.name Gradle task.
        |// Do not edit it (it will be overwritten on the next build anyway).
        |// Do not commit it.
        |class VersionInfo {
        |    val gitCommitHash = "${getCurrentGitCommit()}"
        |    val gitCommitDate = "${getCurrentGitCommitDate()}"
        |    val version = "$project.version"
        |    val buildDate = "${getBuildDate()}"
        |}
        |""".stripMargin("|")
}

task generateVersionInfoFile {
    inputs.property("version", project.version)

    def outputFile = Paths.get("$projectDir/src/main/kotlin/batect/VersionInfo.kt").toFile()
    outputs.file outputFile

    outputs.upToDateWhen {
        outputFile.exists() && outputFile.text == versionInfoFileContents()
    }

    doLast {
        def text = versionInfoFileContents()
        outputFile.text = text
    }
}

compileKotlin.dependsOn generateVersionInfoFile
